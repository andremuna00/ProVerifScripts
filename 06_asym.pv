free a, b: bitstring.
free c: channel.
free m: bitstring[private].

type skey.
type pkey.
fun pk(skey): pkey.
fun sign(bitstring, skey): bitstring.
reduc forall x: bitstring, y: skey; ver(sign(x,y),pk(y)) = x.

event begin(bitstring,bitstring,bitstring).
event end(bitstring,bitstring,bitstring).
query x:bitstring, y:bitstring, z:bitstring; inj-event(end(x,y,z)) ==> inj-event(begin(x,y,z)).

let sender(id1: bitstring, m:bitstring, sk:skey) =
	in(c,(xr:bitstring,xn:bitstring));
	event begin(id1,xr,m);
	out(c,sign((id1,m,xn),sk)).

let receiver(id1: bitstring, id2: bitstring, vk:pkey) =
	new n:bitstring;
	out(c,(id2,n));
	in(c,xm:bitstring);
	let (=id1,ym:bitstring,=n) = ver(xm,vk) in event end(id1,id2,ym).

process
	new k: skey; (!sender(a,m,k) | !receiver(a,b,pk(k)) | out(c,pk(k)))